apiVersion: v1
kind: Template
metadata:
  name: "${APPLICATION_NAME}"
  labels:
    app:  "${APPLICATION_NAME}"
objects:
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: "${APPLICATION_NAME}"
      name: "${APPLICATION_NAME}"
    spec:
      replicas: 1
      selector:
        app: "${APPLICATION_NAME}"
        deploymentconfig: "${APPLICATION_NAME}"
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          labels:
            app: "${APPLICATION_NAME}"
            deploymentconfig: "${APPLICATION_NAME}"
        spec:
          containers:
            - name: "${APPLICATION_NAME}"
              image: "docker-registry.default.svc:5000/${PROJECT_KEY}/${APPLICATION_NAME}:${GIT_COMMIT}"
              imagePullPolicy: Always
              ports: 
              - containerPort: 8080 
                protocol: TCP
              resources:
                limits:
                  cpu: "${CONTAINER_CPU_LIMIT}"
                  memory: "${CONTAINER_MEMORY_LIMIT}"
                requests:
                  cpu: "${CONTAINER_CPU_REQUESTS}"
                  memory: "${CONTAINER_MEMORY_REQUESTS}"
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
    test: false
  - apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: "${APPLICATION_NAME}"
      name: "${APPLICATION_NAME}-route"
    spec:
      host: "${APPLICATION_ROUTE}-${PROJECT_KEY}.hostname"
      port:
        targetPort: 8080-tcp
      to:
        kind: Service
        name: "${APPLICATION_NAME}-service"
        weight: 100
      wildcardPolicy: None
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: "${APPLICATION_NAME}"
      name: "${APPLICATION_NAME}-service"
    spec:
      ports:
      - name: 8080-tcp
        port: 8080
        protocol: TCP
        targetPort: 8080
      selector:
        deploymentconfig: "${APPLICATION_NAME}"
      sessionAffinity: None
    type: ClusterIP
parameters:
  - name: APPLICATION_NAME
    displayName: APPLICATION_NAME
    description: Name of the application
  - name: PROJECT_KEY
    displayName: Namespace
    description: The OpenShift Namespace where the ImageStream resides.
    required: true
    value: devoteamcd
  - name: APPLICATION_ROUTE
    displayName: route
    description: The route .
    required: true
  - name: CONTAINER_MEMORY_LIMIT
    displayName: Memory Limit
    description: Maximum amount of memory the Node.js container can use.
    required: true
    value: 800M
  - name: CONTAINER_MEMORY_REQUESTS
    displayName: Memory requests
    description: Maximum amount of memory the container can request.
    required: true
    value: 500M
  - name: CONTAINER_CPU_REQUESTS
    displayName: cpu requests
    description: Maximum amount of cpu the container can request.
    required: true
    value: 200m
  - name: CONTAINER_CPU_LIMIT
    displayName: cpu limit
    description: Maximum amount of cpu the container can use.
    required: true
    value: 500m
  - name: GIT_COMMIT
    displayName: Git commit
    required: true
